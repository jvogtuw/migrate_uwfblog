<?php
/**
 * @file
 * This file contains hook implementations for the UWF Blog migration.
 *
 * ***********************
 * ****** IMPORTANT ******
 * ***********************
 *
 * See README.md for instructions and caveats.
 */

use Drupal\migrate\MigrateSkipRowException;
use Drupal\migrate\Plugin\MigrateSourceInterface;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\migrate\Row;

/**
 * Implements hook_migrate_prepare_row().
 *
 * This function will be called once for every row in every migration.
 *
 *
 * @see https://drupalize.me/tutorial/use-hookmigratepreparerow?p=2578 for more
 *   info.
 */
function migrate_uwfblog_migrate_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  $debug = FALSE;

  // Exclude elements from the source site that we don't want to migrate.
  $excluded_fields = [
    'comment_body',
    'field_fsblog_p_class', // Temporarily?
    'field_fsblog_highlight', // Replaced with 'Promoted' checkbox
    'field_page_related_entity',
    // 'field_fsblog_post_content', // Temporarily
    'field_image',
    'field_tags',
    'field_unit_abbreviation', // From fs_units vocab
    'field_fsblog_unit',
    // 'field_fsblog_lede'
  ];
  $excluded_entity_types = [
    'comment',
  ];
  $excluded_bundles = [
    'article', // Remnants from this content type being deleted
    'panel',
    'fs_units',
  ];
  $excluded_view_modes = [
    'custom_search_result',
    'fs_search_result',
    'fsblog_slideshow',
    'fsblog_tile',
    'fs_blog_tile',
    'hero_image',
    'hero_image_thumb',
    'image_inline',
    'image_left',
    'image_left_custom_link',
    'image_left_no_link',
    'image_only',
    'image_right',
    'slideshow_slide'
  ];

  // We want to change the IDs for some elements. Here we map the old (source)
  // name to the new (destination) name.
  $field_name_map = [
    'field_fsblog_p_image' => 'field_p_isec_image',
    'field_fsblog_p_title' => 'field_p_csec_title',
    'field_fsblog_p_body' => 'field_p_csec_body',
    'field_fsblog_p_class' => 'field_p_csec_style',
    'field_fsblog_subheading' => 'field_post_subtitle',
    'field_fsblog_unit' => 'field_post_unit',
    'field_fsblog_tags' => 'field_post_tags',
    'field_fsblog_hero' => 'field_post_hero',
    'field_fsblog_hero_thumb' => 'field_post_hero_thumb',
    'field_fsblog_lede' => 'field_post_lede',
    'field_fsblog_post_content' => 'field_post_content',
    'field_first_name' => 'field_user_first_name',
    'field_last_name' => 'field_user_last_name',
    'field_file_image_description' => 'field_media_descriptive_text'
  ];
  $bundle_map = [
    'fsblog' => 'post',
    'fsblog_section' => 'content_section',
    'fsblog_full_image' => 'image_section',
    // 'fs_units' => 'units',
  ];


  // TEMP COMMENT OUT
  // if ($debug && ($row->hasSourceProperty('view_mode') || $row->hasDestinationProperty('view_mode'))) {
  //   $view_mode = $row->getSourceProperty('view_mode') ?? $row->getDestinationProperty('view_mode');
  //   throw new MigrateSkipRowException('Debugging: view mode is ' . $view_mode, TRUE);
  // }

  switch ($migration->id()) {
    case 'blog_d7_paragraph_fsblog_section':

      $item_id = $row->getSourceProperty('item_id');
      $revision_id = $row->getSourceProperty('revision_id');
      echo "\n\r--------------------------------------------------------------\n\r";
      echo "item_id $item_id, revision_id $revision_id in hook_prepare_row.\n\r";
      echo "SOURCE\n\r";
      var_dump($row->getSource());
      echo "DESTINATION\n\r";
      var_dump($row->getDestination());
      
      // throw new MigrateSkipRowException('Debugging: would have created item_id ' . $item_id . ' with revision_id: ' . $revision_id, TRUE);
      break;
    // case 'blog_d7_node_complete_fsblog':
    //   $lede = $row->getSourceProperty('field_fsblog_lede');
    //   // $row->
    //   dpm($lede, 'lede');
    //   break;
    // case 'blog_d7_pathauto_patterns':
      // dpm($row, 'row');
      // break;
    // case 'blog_d7_url_alias':
    //   $alias = $row->getSourceProperty('alias');
    //   if ($debug) {
    //     throw new MigrateSkipRowException('Debugging: would have created alias ' . $alias, TRUE);
    //   }
    //   break;

    // case 'blog_d7_node_complete_fsblog':
    //   $alias = $row->getSourceProperty('alias');
    //   if ($debug) {
    //     throw new MigrateSkipRowException('Debugging: would have created alias ' . $alias, TRUE);
    //   }
    //   break;
    // Customize field definitions
    case 'blog_d7_field':
      $field_name = $row->getSourceProperty('field_name');
      $entity_type = $row->getSourceProperty('entity_type');
      $bundle = $row->getSourceProperty('bundle');

      if ($debug) {
        throw new MigrateSkipRowException('Debugging: would have created field ' . $field_name, TRUE);
      }

      if (in_array($entity_type, $excluded_entity_types) || in_array($bundle, $excluded_bundles) || in_array($field_name, $excluded_fields)) {
        throw new MigrateSkipRowException('Intentionally skipped.', TRUE);
      }
      break;

    // Customize Node type definitions
    case 'blog_d7_node_type':
      $node_bundle = $row->getSourceProperty('type');

      // Skip unwanted bundles
      if (in_array($node_bundle, $excluded_bundles)) {
        throw new MigrateSkipRowException('Intentionally skipped.', TRUE);
      }

      if ($debug) {
        throw new MigrateSkipRowException('Debugging: would have created ' . $node_bundle, TRUE);
      }

      // TEMP COMMENT OUT
      // Rename some node types
      // if (array_key_exists($node_bundle, $bundle_map)) {
      //   $row->setSourceProperty('type', $bundle_map[$node_bundle]);
      // }
      break;

    // Customize paragraph type definitions
    case 'blog_d7_paragraphs_type':
      $paragraph_bundle = $row->getSourceProperty('bundle');
      if ($debug) {
        throw new MigrateSkipRowException('Debugging: would have created ' . $paragraph_bundle, TRUE);
      }

      // TEMP COMMENT OUT
      // Rename the paragraph types
      // if (array_key_exists($paragraph_bundle, $bundle_map)) {
      //   $row->setSourceProperty('bundle', $bundle_map[$paragraph_bundle]);
      // }
      // TEMP COMMENT OUT
      // Also, change the name of the content section.
      // if ($paragraph_bundle == 'fsblog_section') {
      //   $row->setSourceProperty('name', 'Content section');
      // }
      break;

    // Customize Taxonomy vocabulary definitions
    case 'blog_d7_taxonomy_vocabulary':
      $vocabulary = $row->getSourceProperty('machine_name');

      // Skip unwanted bundles
      if (in_array($vocabulary, $excluded_bundles)) {
        throw new MigrateSkipRowException('Intentionally skipped.', TRUE);
      }

      if ($debug) {
        throw new MigrateSkipRowException('Debugging: would have created ' . $vocabulary, TRUE);
      }

      break;

    // Customize field instances and settings
    case 'blog_d7_field_instance':
    case 'blog_d7_field_formatter_settings':
    case 'blog_d7_field_instance_widget_settings':

      $field_name = $row->getSourceProperty('field_name');
      $entity_type = $row->getSourceProperty('entity_type');
      $bundle = $row->getSourceProperty('bundle');

      // if ($field_name == 'field_post_abstract') {
      //   echo "hi\n\r";
      // }
      // if ($migration->id() == 'blog_d7_field_instance') {
      //   if ($row->getSourceProperty('type') == 'paragraphs'
      //     && $row->hasSourceProperty('settings')) {
      //     $settings = $row->getSourceProperty('settings');
      //     if (isset($settings['allowed_bundles'])) {
      //       $allowed_bundles = ['content_section'];
      //     }
      //     $row->setSourceProperty('settings', $settings);
      //     // $allowed_bundles = $row->getSourceProperty('settings')['allowed_bundles'];
      //     // $keys = array_keys($row->getSourceProperty('settings'));
      //     // echo implode(', ', $allowed_bundles) . "\n\r";
      //     // var_dump($row->getSourceProperty('handler_settings'));
      //   }
      // }

      // Skip some fields
      if (in_array($entity_type, $excluded_entity_types) || in_array($bundle, $excluded_bundles) || in_array($field_name, $excluded_fields)) {
        throw new MigrateSkipRowException('Intentionally skipped.', TRUE);
      }

      if ($debug) {
        throw new MigrateSkipRowException('Debugging: would have created ' . $field_name, TRUE);
      }

      // Exclude specific view modes
      $view_mode = $row->getSourceProperty('view_mode') ?? NULL;
      if (!is_null($view_mode) && in_array($view_mode, $excluded_view_modes)) {
        throw new MigrateSkipRowException($view_mode . ' view modes ignored.', TRUE);
      }
      break;

    // Customize file import
    case 'blog_d7_file':
      $filepath = $row->getSourceProperty('filepath');
      if ($debug) {
        throw new MigrateSkipRowException('Debugging: would have created file ' . $filepath, TRUE);
      }
      if (!str_starts_with($filepath, 'files/media')) {
        throw new MigrateSkipRowException($filepath . ' was skipped.', TRUE);
      }
      break;

    // Customize view mode definitions
    case 'blog_d7_view_modes':
      $view_mode = $row->getSourceProperty('view_mode');
      if ($debug) {
        throw new MigrateSkipRowException('Debugging: Would have created ' . $view_mode . ' view mode', TRUE);
      }

      // TEMP COMMENT OUT
      // Exclude all view modes for ignored entity types
      $entity_type = $row->getSourceProperty('entity_type');
      if (in_array($entity_type, $excluded_entity_types)) {
        throw new MigrateSkipRowException($entity_type . ' entities ignored.', TRUE);
      }
      // Exclude specific view modes
      if (in_array($view_mode, $excluded_view_modes)) {
        throw new MigrateSkipRowException($view_mode . ' view modes ignored.', TRUE);
      }
      break;

    // Customize view mode definitions
    case 'blog_d7_media_view_modes':
      if ($debug) {
        throw new MigrateSkipRowException('Debugging: Would have created ' . $row->getSourceProperty('mode'), TRUE);
      }
      // Exclude all view modes for ignored entity types
      // $entity_type = $row->getSourceProperty('entity_type');
      // if (in_array($entity_type, $excluded_entity_types)) {
      //   throw new MigrateSkipRowException($entity_type . ' entities ignored.', TRUE);
      // }
      break;

    case 'blog_d7_file_entity_formatter_image':
      if ($debug) {
        throw new MigrateSkipRowException('Debugging: would have created ' . $row->getSourceProperty('field_name') . ' with view mode ' . $row->getDestinationProperty('view_mode'), TRUE);
      }
      break;
  }

  // Customize menu import - only import the main menu
  if ($migration->id() == 'blog_d7_menu' || $migration->id() == 'blog_d7_menu_links') {
    $menu_name = $row->getSourceProperty('menu_name');
    if ($menu_name !== 'main-menu') {
      if ($migration->id() == 'blog_d7_menu') {
        throw new MigrateSkipRowException($menu_name . ' menu was skipped.', TRUE);
      }
      else {
        $link_path = $row->getSourceProperty('link_path');
        throw new MigrateSkipRowException($menu_name . ' menu link "' . $link_path . '" was skipped.', TRUE);
      }
    }
  }

}
