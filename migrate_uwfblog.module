<?php

/**
 * @file
 * This file contains hook implementations for the UWF Blog migration.
 *
 * ***********************
 * ****** IMPORTANT ******
 * ***********************
 *
 * See README.md for instructions and caveats.
 */

use Drupal\migrate\MigrateSkipRowException;
use Drupal\migrate\Plugin\MigrateSourceInterface;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\migrate\Row;

/**
 * Implements hook_migrate_prepare_row().
 *
 * This function will be called once for every row in every migration.
 *
 * @see https://drupalize.me/tutorial/use-hookmigratepreparerow?p=2578
 */
function migrate_uwfblog_migrate_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  $debug = FALSE;

  // Exclude elements from the source site that we don't want to migrate.
  $excluded_fields = [
    'comment_body',
    // Paragraphs won't have style options.
    'field_fsblog_p_class',
    // Replaced with 'Promoted' checkbox.
    'field_fsblog_highlight',
    'field_page_related_entity',
    'field_image',
    'field_tags',
    // From fs_units vocab.
    'field_unit_abbreviation',
    'field_fsblog_unit',
    'field_file_image_description',
    'field_file_image_desc_link',
  ];

  // While I managed to completely get rid of comments, it was more trouble than
  // it was worth.
  $excluded_entity_types = [
    'comment',
  ];

  // Node and taxonomy vocab bundles that won't be migrating.
  $excluded_bundles = [
    'article',
    'panel',
    'fs_units',
  ];

  $excluded_view_modes = [
    'custom_search_result',
    'fs_search_result',
    'fsblog_slideshow',
    'fsblog_tile',
    'fs_blog_tile',
    'hero_image',
    'hero_image_thumb',
    'image_inline',
    'image_left',
    'image_left_custom_link',
    'image_left_no_link',
    'image_only',
    'image_right',
    'image_none',
    'image_test',
    'slideshow_slide',
  ];

  // Reactions to specific migration IDs.
  switch ($migration->id()) {

    // Customize field definitions.
    case 'blog_d7_field':
      $field_name = $row->getSourceProperty('field_name');
      $entity_type = $row->getSourceProperty('entity_type');
      $bundle = $row->getSourceProperty('bundle');

      if ($debug) {
        throw new MigrateSkipRowException('Debugging: would have created field ' . $field_name, TRUE);
      }

      // Skip unwanted fields.
      if (in_array($entity_type, $excluded_entity_types) || in_array($bundle, $excluded_bundles) || in_array($field_name, $excluded_fields)) {
        throw new MigrateSkipRowException('Intentionally skipped.', TRUE);
      }
      break;

    // Customize Node type definitions.
    case 'blog_d7_node_type':
      $node_bundle = $row->getSourceProperty('type');

      // Skip unwanted bundles.
      if (in_array($node_bundle, $excluded_bundles)) {
        throw new MigrateSkipRowException('Intentionally skipped.', TRUE);
      }

      if ($debug) {
        throw new MigrateSkipRowException('Debugging: would have created ' . $node_bundle, TRUE);
      }
      break;

    // Customize Taxonomy vocabulary definitions.
    case 'blog_d7_taxonomy_vocabulary':
      $vocabulary = $row->getSourceProperty('machine_name');

      // Skip unwanted bundles.
      if (in_array($vocabulary, $excluded_bundles)) {
        throw new MigrateSkipRowException('Intentionally skipped.', TRUE);
      }

      if ($debug) {
        throw new MigrateSkipRowException('Debugging: would have created ' . $vocabulary, TRUE);
      }
      break;

    // Customize field instances and settings.
    case 'blog_d7_field_instance':
    case 'blog_d7_field_formatter_settings':
    case 'blog_d7_field_instance_widget_settings':

      $field_name = $row->getSourceProperty('field_name');
      $entity_type = $row->getSourceProperty('entity_type');
      $bundle = $row->getSourceProperty('bundle');

      // Skip some fields.
      if (in_array($entity_type, $excluded_entity_types) || in_array($bundle, $excluded_bundles) || in_array($field_name, $excluded_fields)) {
        throw new MigrateSkipRowException('Intentionally skipped.', TRUE);
      }

      if ($debug) {
        throw new MigrateSkipRowException('Debugging: would have created ' . $field_name, TRUE);
      }

      // Exclude specific view modes.
      $view_mode = $row->getSourceProperty('view_mode') ?? NULL;
      if (!is_null($view_mode) && in_array($view_mode, $excluded_view_modes)) {
        throw new MigrateSkipRowException($view_mode . ' view modes ignored.', TRUE);
      }
      break;

    // Customize file import.
    case 'blog_d7_file':
      $filepath = $row->getSourceProperty('filepath');
      // $debug = TRUE;
      if ($debug) {
        throw new MigrateSkipRowException('Debugging: would have created file ' . $filepath, TRUE);
      }
      if (!str_starts_with($filepath, 'files/media')) {
        throw new MigrateSkipRowException($filepath . ' was skipped.', TRUE);
      }
      break;

    // Customize view mode definitions.
    case 'blog_d7_view_modes':
      $view_mode = $row->getSourceProperty('view_mode');
      if ($debug) {
        throw new MigrateSkipRowException('Debugging: Would have created ' . $view_mode . ' view mode', TRUE);
      }

      // Exclude all view modes for ignored entity types.
      $entity_type = $row->getSourceProperty('entity_type');
      if (in_array($entity_type, $excluded_entity_types)) {
        throw new MigrateSkipRowException($entity_type . ' entities ignored.', TRUE);
      }
      // Exclude specific view modes.
      if (in_array($view_mode, $excluded_view_modes)) {
        throw new MigrateSkipRowException($view_mode . ' view modes ignored.', TRUE);
      }
      break;
  }

}
